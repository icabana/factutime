<?phpclass FacturasControlador extends ControllerBase {    public function cargarTablaFacturas() {                $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();        $facturas = $FacturasModel->getTodosFacturas();                $tipo = "FACTURAS";        include 'vistas/facturas/default.php';                            }      public function cargarTablaPedidos() {                $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();        $facturas = $FacturasModel->getTodosPedidos();                $tipo = "PEDIDOS";        include 'vistas/facturas/default.php';                            }      public function cargarTablaCotizaciones() {                $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();        $facturas = $FacturasModel->getTodosCotizaciones();                $tipo = "COTIZACIONES";        include 'vistas/facturas/default.php';                            }              public function cargarTablaDevoluciones() {                $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();        $facturas = $FacturasModel->getTodosDevoluciones();                $tipo = "DEVOLUCIONES";        include 'vistas/facturas/default.php';                            }                      public function abrirCrearFactura(){                 $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                 $this->model->cargar("UsuarioModel.php", "configuracion");        $UsuarioModel = new UsuarioModel();                 $this->model->cargar("ClientesModel.php", "configuracion");        $ClientesModel = new ClientesModel();                 $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();        $terminos = $TerminosModel->getTodosTerminos();                $id_factura = $FacturasModel->insertarFactura($_POST['tipo']);                $clientes = $ClientesModel->getTodosClientes();        $roles = $UsuarioModel->getTodosRoles();        $datos_usuario = $UsuarioModel->getDatosUsuario($_SESSION['idUsuario']);                  $this->model->cargar("CategoriasModel.php", "configuracion");        $CategoriasModel = new CategoriasModel();                $this->model->cargar("SubCategoriasModel.php", "configuracion");        $SubCategoriasModel = new SubCategoriasModel();                $this->model->cargar("UnidadesModel.php", "configuracion");        $UnidadesModel = new UnidadesModel();                $this->model->cargar("UnidadesModel.php", "configuracion");        $UnidadesModel = new UnidadesModel();                $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();                $this->model->cargar("BodegasModel.php", "configuracion");        $BodegasModel = new BodegasModel();                        $this->model->cargar("ImpuestosModel.php", "configuracion");        $ImpuestosModel = new ImpuestosModel();                $categorias = $CategoriasModel->getTodosCategorias();        $subcategorias = $SubCategoriasModel->getTodosSubCategorias();        $unidades = $UnidadesModel->getTodosUnidades();        $terminos = $TerminosModel->getTodosTerminos();        $bodegas = $BodegasModel->getTodosBodegas();        $impuestos = $ImpuestosModel->getTodosImpuestos();                 $tipo = $_POST['tipo'];                 		        include 'vistas/facturas/insertar.php';            }             public function abrirEditarFactura(){        $this->model->cargar("FacturasModel.php", "facturas");                $FacturasModel = new FacturasModel();        $this->model->cargar("RecibosModel.php", "recibos");                $RecibosModel = new RecibosModel();        $this->model->cargar("CreditosModel.php", "creditos");                $CreditosModel = new CreditosModel();        $this->model->cargar("UsuarioModel.php", "configuracion");        $UsuarioModel = new UsuarioModel();        $this->model->cargar("ClientesModel.php", "configuracion");        $ClientesModel = new ClientesModel();        $clientes = $ClientesModel->getTodosClientes();        $roles = $UsuarioModel->getTodosRoles();                      $datos_factura = $FacturasModel->getDatosFactura($_POST['id_factura']);                $todas_facturas = $FacturasModel->getFacturasPorCliente($datos_factura['CLIENTE_FACTURA']);                        $todos_recibos = $RecibosModel->getRecibosPorCliente($datos_factura['CLIENTE_FACTURA']);        $todos_creditos = $CreditosModel->getCreditosPorCliente($datos_factura['CLIENTE_FACTURA']);                        $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();        $terminos = $TerminosModel->getTodosTerminos();                $total_facturas = 0;                foreach ($todas_facturas as $factura) {            $total_facturas += $factura['TOTAL_FACTURA'];        }                $total_recibos = 0;                foreach ($todos_recibos as $recibo) {            $total_recibos += $recibo['VALOR_RECIBO'];        }                        $total_creditos = 0;                foreach ($todos_creditos as $credito) {            $total_creditos += $credito['VALOR_CREDITO'];        }                $productos = $FacturasModel->getProductosPorFactura($_POST['id_factura']);        $consecutivo_bd = $FacturasModel->getConsecutivo();        $tipo = $_POST['tipo'];                        ///CALCULAR SALDO DE ÉSTA FACTURA SELECCIONADA        $saldo_factura = 0;        $estado_factura = "PAGADA";        $total_pagado = $total_recibos;        $total_facturas_anteriores = 0;                foreach ($todas_facturas as $factura) {                                    if($factura['CONSECUTIVO_FACTURA'] != $datos_factura['CONSECUTIVO_FACTURA']){                                $total_facturas_anteriores += $factura['TOTAL_FACTURA'];            }else{                break;            }                                    }                 //SUMA DE LAS FACTURAS ANTERIORES A ESTA, MAS EL VALOR DE ESTA FACTURA         $total_facturas_anteriores += $datos_factura['TOTAL_FACTURA']; // LO QUE DEBE HASTA ESTA FACTURA                if($total_facturas_anteriores <= $total_pagado){                        $saldo_factura = 0;            $estado_factura = "PAGADA";                    }else{                        $saldo_factura = $total_facturas_anteriores - $total_pagado - $total_creditos;                        if($saldo_factura > $datos_factura['TOTAL_FACTURA']){                $saldo_factura = $datos_factura['TOTAL_FACTURA'];            }                        $estado_factura = "RESTANTE";                    }        include 'vistas/facturas/editar.php';    }                    public function guardarFactura() {        $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();           $params = Parametros::singleton();        $consecutivo = $FacturasModel->getConsecutivo();        if($consecutivo == "" || $consecutivo == "0"){            $consecutivo = $params->valor('CONSECUTIVO');        }        $resp = $FacturasModel->editarFactura($_POST["id_factura"], $_POST["vendedor"], $_POST["cliente"], $_POST["termino"], $_POST["subtotal"], $_POST["descuento"], $_POST["iva19"], $_POST["iva5"], $_POST["total"], $_POST["descripcion"], $_POST["fecha"], $_POST["fecha2"], $_POST["vencimiento"], $_POST["tipopago"], $consecutivo + 1);                      if( $resp != 0 ){                                    $asunto = utf8_decode("Notificación Nueva Factura");                 $factura = $FacturasModel->getDatosFactura($_POST["id_factura"]);             $fechas = new Fechas();                            $mensaje = "Se ha creado un nuevo contrato, el cual se especifica a continuación: <br><br>";            $mensaje .= "FACTURA NÚMERO: ". $factura['CONSECUTIVO_FACTURA']."<br>";                        $mensaje .= "NOMBRE DEL CLIENTE: ".$factura['NOMBRES_ESTUDIANTE']." ".$factura['APELLIDOS_ESTUDIANTE']."<br>";                        $mensaje .= "VALOR DE LA FACTURA: $". number_format($factura['TOTAL_FACTURA'],0,',','.')."<br>";                                                            $mensaje .= "<br><br>";                                     $correo1 = "ismael.cabana@gmail.com";            $nombre1 = "Ismael Cabana";                                    //echo $this->EnviarCorreo($mensaje, $asunto, '', $correo1, $nombre1);                        echo 1;        }else{            echo 0;			        }                  }                    public function convertirFactura() {              $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                   $params = Parametros::singleton();                                                         $consecutivo = $FacturasModel->getConsecutivo();        if($consecutivo == "" || $consecutivo == "0"){            $consecutivo = $params->valor('CONSECUTIVO');        }                        $datos = $FacturasModel->getDatosFactura($_POST["id_factura"]);                $resp = $FacturasModel->convertirFactura($datos['CLIENTE_FACTURA'], $datos['VENDEDOR_FACTURA'], $datos['TERMINO_FACTURA'], $datos['SUBTOTAL_FACTURA'], $datos['DESCUENTO_FACTURA'], $datos['IMPUESTO19_FACTURA'], $datos['IMPUESTO5_FACTURA'], $datos['TOTAL_FACTURA'], $datos['DESCRIPCION_FACTURA'], $datos['FECHA_FACTURA'], $datos['VENCIMIENTO_FACTURA'], $consecutivo + 1);                               $productos = $FacturasModel->getProductosPorFactura($_POST["id_factura"]);                foreach ($productos as $producto) {                        $FacturasModel->insertarProducto($resp, $producto['PRODUCTO_FACPRO'], $producto['CANTIDAD_FACPRO'], $producto['PRECIOUNITARIO_FACPRO'], $producto['SUBTOTAL_FACPRO'], $producto['DESCUENTO_FACPRO'], $producto['IMPUESTO_FACPRO'], $producto['TOTAL_FACPRO']);                    }                                 if( $resp != 0 ){            echo $resp;        }else{            echo 0;			        }                  }                        public function editarFactura() {              $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                   $params = Parametros::singleton();                                   $resp = $FacturasModel->editarFacPedCot($_POST["id_factura"], $_POST["cliente"], $_POST["vendedor"], $_POST["termino"], $_POST["descripcion"], $_POST["fecha"], $_POST["fecha2"], $_POST["vencimiento"], $_POST["tipopago"]);                                        if( $resp != 0 ){            echo 1;        }else{            echo 0;			        }                  }                   public function editarValoresFactura() {              $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                   $params = Parametros::singleton();                                                    $resp = $FacturasModel->editarValoresFacPedCot($_POST["id_factura"], $_POST["subtotal"], $_POST["descuento"], $_POST["iva19"], $_POST["iva5"], $_POST["total"]);                          if( $resp != 0 ){            echo 1;        }else{            echo 0;			        }                  }                     public function eliminarFactura() {                $this->model->cargar("FacturasModel.php", "facturas");        $facturasModel = new FacturasModel();                $facturasModel->eliminarFactura($_POST["id_factura"]);                echo "1";                    }                    public function buscarProducto() {        $this->model->cargar("ProductosModel.php", "configuracion");        $ProductosModel = new ProductosModel();        $this->model->cargar("ClientesModel.php", "configuracion");        $ClientesModel = new ClientesModel();        $datos_cliente = $ClientesModel->getDatosCliente($_POST['cliente']);        $productos = $ProductosModel->getProductosLIKE($_POST['texto']);                                $tabla_productos = "<table id='tabla_productos'  class='table table-hover'>        <thead>        <tr>                                             <th><center>CODIGO</center></th>             <th><center>NOMBRE</center></th>                                </tr>    </thead>    <tbody>";                 foreach ($productos as $clave => $valor) {                        $tabla_productos .= "<tr onclick='seleccionar_producto(" . $valor['ID_PRODUCTO'] . ", \"" . ($valor['CODIGO_PRODUCTO']) . "\", \"" . (utf8_encode($valor['NOMBRE_PRODUCTO'])) . "\", \"" . (utf8_encode($valor['DESCUENTO_PRODUCTO'])) . "\", \"" . (utf8_encode($valor['IMPUESTO_PRODUCTO'])) . "\", \"" . (utf8_encode($valor['PRECIO1_PRODUCTO'])) . "\");'>";              $tabla_productos .= "<td><strong>" . utf8_encode($valor['CODIGO_PRODUCTO']) . "</strong></td>";            $tabla_productos .= "<td><strong>" . utf8_encode($valor['NOMBRE_PRODUCTO']) . "</strong></td>";            $tabla_productos .= "</tr>";                    }               $tabla_productos .= "</tbody></table>";                echo $tabla_productos;              }            public function cambiarValor() {        $this->model->cargar("ProductosModel.php", "configuracion");        $ProductosModel = new ProductosModel();        $this->model->cargar("ClientesModel.php", "configuracion");        $ClientesModel = new ClientesModel();        $datos_cliente = $ClientesModel->getDatosCliente($_POST['cliente']);        $datos_producto = $ProductosModel->getDatosProducto($_POST['id_producto']);                        if($_POST['tipo'] == "MAYOR"){            if($datos_cliente['PRECIO_CLIENTE'] == "PRECIO 1"){                $valor_producto = $datos_producto['PRECIO1_PRODUCTO'];            }            if($datos_cliente['PRECIO_CLIENTE'] == "PRECIO 2"){                $valor_producto = $datos_producto['PRECIO2_PRODUCTO'];            }            if($datos_cliente['PRECIO_CLIENTE'] == "PRECIO 3"){                $valor_producto = $datos_producto['PRECIO3_PRODUCTO'];            }            if($datos_cliente['PRECIO_CLIENTE'] == "PRECIO 4"){                $valor_producto = $datos_producto['PRECIO4_PRODUCTO'];            }        }else{            if($datos_cliente['PRECIO_CLIENTE'] == "PRECIO 1"){                $valor_producto = $datos_producto['PRECIO1xUNIDAD_PRODUCTO'];            }            if($datos_cliente['PRECIO_CLIENTE'] == "PRECIO 2"){                $valor_producto = $datos_producto['PRECIO2xUNIDAD_PRODUCTO'];            }            if($datos_cliente['PRECIO_CLIENTE'] == "PRECIO 3"){                $valor_producto = $datos_producto['PRECIO3xUNIDAD_PRODUCTO'];            }            if($datos_cliente['PRECIO_CLIENTE'] == "PRECIO 4"){                $valor_producto = $datos_producto['PRECIO4xUNIDAD_PRODUCTO'];            }                                }        echo $valor_producto;              }                                          public function buscarCliente() {        $this->model->cargar("UsuarioModel.php", "configuracion");        $UsuarioModel = new UsuarioModel();        $clientes = $UsuarioModel->getEstudiantesLIKE($_POST['texto']);        $tabla_clientes = "<table id='tabla_clientes'  class='table table-hover'>    <thead>        <tr>                 <th><center>NOMBRE</center></th>         </tr>        </thead>    <tbody>";        foreach ($clientes as $clave => $valor) {            $tabla_clientes .= "<tr onclick='seleccionar_cliente(" . $valor['ID_ESTUDIANTE'] . ", \"" . ($valor['NOMBRES_ESTUDIANTE']) . "\", \"" . (utf8_encode($valor['DOCUMENTO_ESTUDIANTE'])) . "\", \"" . (utf8_encode($valor['DIRECCION_ESTUDIANTE'])) . "\", \"" . (utf8_encode($valor['DIRECCION_ESTUDIANTE'])) . "\", \"" . (utf8_encode($valor['TELEFONO_ESTUDIANTE'])) . "\", \"" . (utf8_encode($valor['CELULAR_ESTUDIANTE'])) . "\", \"" . (utf8_encode($valor['CIUDAD_ESTUDIANTE'])) . "\", \"" . (utf8_encode($valor['APELLIDOS_ESTUDIANTE'])) . "\");'>";              $tabla_clientes .= "<td><strong>" . utf8_encode($valor['NOMBRES_ESTUDIANTE'])." ".(utf8_encode($valor['APELLIDOS_ESTUDIANTE'])) . "</strong></td>";            $tabla_clientes .= "</tr>";        }       $tabla_clientes .= "</tbody></table>";        echo $tabla_clientes;      }                      public function buscarVendedor() {            $this->model->cargar("VendedoresModel.php", "configuracion");        $VendedoresModel = new VendedoresModel();                $vendedores = $VendedoresModel->getVendedoresLIKE($_POST['texto']);                $tabla_vendedores = "<table id='tabla_vendedores'  class='table table-hover'>        <thead>        <tr>                                             <th><center>NOMBRE</center></th>                                </tr>    </thead>    <tbody>";                 foreach ($vendedores as $clave => $valor) {                        $tabla_vendedores .= "<tr onclick='seleccionar_vendedor(" . $valor['ID_VENDEDOR'] . ", \"" . ($valor['NOMBRE_VENDEDOR']) . "\");'>";              $tabla_vendedores .= "<td><strong>" . utf8_encode($valor['NOMBRE_VENDEDOR']) . "</strong></td>";                       $tabla_vendedores .= "</tr>";                    }               $tabla_vendedores .= "</tbody></table>";                echo $tabla_vendedores;              }                                        public function insertarProducto() {                $this->model->cargar("FacturasModel.php", "facturas");        $facturasModel = new FacturasModel();                                $resp = $facturasModel->insertarProducto($_POST['id_factura'], $_POST['id_producto'], $_POST['cantidad'], $_POST['preciounitario'], $_POST['subtotal'], $_POST['descuento'], $_POST['impuesto'], $_POST['total']);                        $productos = $facturasModel->getProductosPorFactura($_POST['id_factura']);                $subtotal_total = 0;        $descuento_total = 0;        $impuesto5_total = 0;        $impuesto19_total = 0;        $descuento_parcial = 0;                        foreach ($productos as $producto) {                        $subtotal_total += $producto['SUBTOTAL_FACPRO'];                        $descuento_total += $producto['SUBTOTAL_FACPRO'] *  $producto['DESCUENTO_FACPRO'] / 100;                        $descuento_parcial = $producto['SUBTOTAL_FACPRO'] *  $producto['DESCUENTO_FACPRO'] / 100;                        if($producto['IMPUESTO_FACPRO'] == 5){                            $impuesto5_total += ($producto['SUBTOTAL_FACPRO'] - $descuento_parcial) *  $producto['IMPUESTO_FACPRO'] / 100;                            }            if($producto['IMPUESTO_FACPRO'] == 19){                            $impuesto19_total += ($producto['SUBTOTAL_FACPRO'] - $descuento_parcial) *  $producto['IMPUESTO_FACPRO'] / 100;                            }        }                         include 'vistas/facturas/tabla_productos.php';                 $array[] = array('tabla'=>$tabla_productos,'subtotal'=>$subtotal_total,'texto_subtotal'=>"$".number_format($subtotal_total,0,',','.'),             'descuento'=>$descuento_total,'texto_descuento'=>"$".number_format($descuento_total,0,',','.'),        'subtotal2'=>$subtotal_total-$descuento_total,'texto_subtotal2'=>"$".number_format(($subtotal_total-$descuento_total),0,',','.'),               'impuesto5'=>$impuesto5_total,'texto_impuesto5'=>"$".number_format($impuesto5_total,0,',','.'),               'impuesto19'=>$impuesto19_total,'texto_impuesto19'=>"$".number_format($impuesto19_total,0,',','.') ,'texto_total'=>"$".number_format($subtotal_total-$descuento_total+$impuesto5_total+$impuesto19_total,0,',','.')   );        echo json_encode($array);                                    }              public function eliminarProducto() {                $this->model->cargar("FacturasModel.php", "facturas");        $facturasModel = new FacturasModel();                $facturasModel->eliminarProducto($_POST["id_facpro"]);                                                $productos = $facturasModel->getProductosPorFactura($_POST['id_factura']);                $subtotal_total = 0;        $descuento_total = 0;        $impuesto5_total = 0;        $impuesto19_total = 0;        $descuento_parcial = 0;                        foreach ($productos as $producto) {                        $subtotal_total += $producto['SUBTOTAL_FACPRO'];                        $descuento_total += $producto['SUBTOTAL_FACPRO'] *  $producto['DESCUENTO_FACPRO'] / 100;                        $descuento_parcial = $producto['SUBTOTAL_FACPRO'] *  $producto['DESCUENTO_FACPRO'] / 100;                        if($producto['IMPUESTO_FACPRO'] == 5){                            $impuesto5_total += ($producto['SUBTOTAL_FACPRO'] - $descuento_parcial) *  $producto['IMPUESTO_FACPRO'] / 100;                            }            if($producto['IMPUESTO_FACPRO'] == 19){                            $impuesto19_total += ($producto['SUBTOTAL_FACPRO'] - $descuento_parcial) *  $producto['IMPUESTO_FACPRO'] / 100;                            }                                }                         include 'vistas/facturas/tabla_productos.php';                  $array[] = array('tabla'=>$tabla_productos,'subtotal'=>$subtotal_total,'texto_subtotal'=>"$".number_format($subtotal_total,0,',','.'),             'descuento'=>$descuento_total,'texto_descuento'=>"$".number_format($descuento_total,0,',','.'),        'subtotal2'=>$subtotal_total-$descuento_total,'texto_subtotal2'=>"$".number_format(($subtotal_total-$descuento_total),0,',','.'),               'impuesto5'=>$impuesto5_total,'texto_impuesto5'=>"$".number_format($impuesto5_total,0,',','.'),               'impuesto19'=>$impuesto19_total,'texto_impuesto19'=>"$".number_format($impuesto19_total,0,',','.') ,'texto_total'=>"$".number_format($subtotal_total-$descuento_total+$impuesto5_total+$impuesto19_total,0,',','.')   );                            echo json_encode($array);             }                    public function cargarReportes() {                         include 'vistas/facturas/reportes.php';                                   }                                 public function imprimirFactura(){        $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                 $this->model->cargar("UsuarioModel.php", "configuracion");        $UsuarioModel = new UsuarioModel();                 $this->model->cargar("ClientesModel.php", "configuracion");        $ClientesModel = new ClientesModel();                 $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();                $this->model->cargar("RecibosModel.php", "recibos");                $RecibosModel = new RecibosModel();        $this->model->cargar("CreditosModel.php", "creditos");                $CreditosModel = new CreditosModel();                   $datos_factura = $FacturasModel->getDatosFactura($_POST['id_factura']);                $todas_facturas = $FacturasModel->getFacturasPorCliente($datos_factura['CLIENTE_FACTURA']);                        $todos_recibos = $RecibosModel->getRecibosPorCliente($datos_factura['CLIENTE_FACTURA']);        $todos_creditos = $CreditosModel->getCreditosPorCliente($datos_factura['CLIENTE_FACTURA']);                        $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();        $terminos = $TerminosModel->getTodosTerminos();                $total_facturas = 0;                foreach ($todas_facturas as $factura) {            $total_facturas += $factura['TOTAL_FACTURA'];        }                $total_recibos = 0;                foreach ($todos_recibos as $recibo) {            $total_recibos += $recibo['VALOR_RECIBO'];        }                        $total_creditos = 0;                foreach ($todos_creditos as $credito) {            $total_creditos += $credito['VALOR_CREDITO'];        }                $productos = $FacturasModel->getProductosPorFactura($_POST['id_factura']);        $consecutivo_bd = $FacturasModel->getConsecutivo();        $tipo = $_POST['tipo'];                        ///CALCULAR SALDO DE ÉSTA FACTURA SELECCIONADA        $saldo_factura = 0;        $estado_factura = "PAGADA";        $total_pagado = $total_recibos + $total_creditos;        $total_facturas_anteriores = 0;                foreach ($todas_facturas as $factura) {                                    if($factura['CONSECUTIVO_FACTURA'] != $datos_factura['CONSECUTIVO_FACTURA']){                                $total_facturas_anteriores += $factura['TOTAL_FACTURA'];            }else{                break;            }                    }                 //SUMA DE LAS FACTURAS ANTERIORES A ESTA, MAS EL VALOR DE ESTA FACTURA         $total_facturas_anteriores += $datos_factura['TOTAL_FACTURA']; // LO QUE DEBE HASTA ESTA FACTURA                if($total_facturas_anteriores <= $total_pagado){                        $saldo_factura = 0;            $estado_factura = "PAGADA";                    }else{                        $saldo_factura = $total_facturas_anteriores - $total_pagado;                        if($saldo_factura > $datos_factura['TOTAL_FACTURA']){                $saldo_factura = $datos_factura['TOTAL_FACTURA'];            }                        $estado_factura = "RESTANTE";                    }                                $clientes = $ClientesModel->getTodosClientes();        $productos = $FacturasModel->getProductosPorFactura($_POST['id_factura']);        $consecutivo_bd = $FacturasModel->getConsecutivo();        $factura = $FacturasModel->getDatosFactura($_POST['id_factura']);        $admision = $FacturasModel->getInscripcionActualPorEstudiante($datos_factura['CLIENTE_FACTURA']);                        include("vistas/facturas/factura.php");                            $dirPdf = "archivos/pdf_factura".$_POST['id_factura'].".pdf";                  $this->pdf->Output(''.$dirPdf.'');                    echo "urlRuta=".$dirPdf;              }             public function imprimirTickets(){        $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                 $this->model->cargar("UsuarioModel.php", "configuracion");        $UsuarioModel = new UsuarioModel();                 $this->model->cargar("ClientesModel.php", "configuracion");        $ClientesModel = new ClientesModel();                 $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();                $this->model->cargar("RecibosModel.php", "recibos");                $RecibosModel = new RecibosModel();        $this->model->cargar("CreditosModel.php", "creditos");                $CreditosModel = new CreditosModel();                   $datos_factura = $FacturasModel->getDatosFactura($_POST['id_factura']);                $todas_facturas = $FacturasModel->getFacturasPorCliente($datos_factura['CLIENTE_FACTURA']);                        $todos_recibos = $RecibosModel->getRecibosPorCliente($datos_factura['CLIENTE_FACTURA']);        $todos_creditos = $CreditosModel->getCreditosPorCliente($datos_factura['CLIENTE_FACTURA']);                        $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();        $terminos = $TerminosModel->getTodosTerminos();                $total_facturas = 0;                foreach ($todas_facturas as $factura) {            $total_facturas += $factura['TOTAL_FACTURA'];        }                $total_recibos = 0;                foreach ($todos_recibos as $recibo) {            $total_recibos += $recibo['VALOR_RECIBO'];        }                        $total_creditos = 0;                foreach ($todos_creditos as $credito) {            $total_creditos += $credito['VALOR_CREDITO'];        }                $productos = $FacturasModel->getProductosPorFactura($_POST['id_factura']);        $consecutivo_bd = $FacturasModel->getConsecutivo();        $tipo = $_POST['tipo'];                        ///CALCULAR SALDO DE ÉSTA FACTURA SELECCIONADA        $saldo_factura = 0;        $estado_factura = "PAGADA";        $total_pagado = $total_recibos + $total_creditos;        $total_facturas_anteriores = 0;                foreach ($todas_facturas as $factura) {                                    if($factura['CONSECUTIVO_FACTURA'] != $datos_factura['CONSECUTIVO_FACTURA']){                                $total_facturas_anteriores += $factura['TOTAL_FACTURA'];            }else{                break;            }                                    }                 //SUMA DE LAS FACTURAS ANTERIORES A ESTA, MAS EL VALOR DE ESTA FACTURA         $total_facturas_anteriores += $datos_factura['TOTAL_FACTURA']; // LO QUE DEBE HASTA ESTA FACTURA                if($total_facturas_anteriores <= $total_pagado){                        $saldo_factura = 0;            $estado_factura = "PAGADA";                    }else{                        $saldo_factura = $total_facturas_anteriores - $total_pagado;                        if($saldo_factura > $datos_factura['TOTAL_FACTURA']){                $saldo_factura = $datos_factura['TOTAL_FACTURA'];            }                        $estado_factura = "RESTANTE";                    }                                $clientes = $ClientesModel->getTodosClientes();        $productos = $FacturasModel->getProductosPorFactura($_POST['id_factura']);        $consecutivo_bd = $FacturasModel->getConsecutivo();        $factura = $FacturasModel->getDatosFactura($_POST['id_factura']);                include("vistas/facturas/factura_1.php");                            $dirPdf = "archivos/pdf_factura".$_POST['id_factura'].".pdf";                  $this->pdf->Output(''.$dirPdf.'');                    echo "urlRuta=".$dirPdf;              }                 public function imprimirFactura2(){                                 $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                 $this->model->cargar("UsuarioModel.php", "configuracion");        $UsuarioModel = new UsuarioModel();                 $this->model->cargar("ClientesModel.php", "configuracion");        $ClientesModel = new ClientesModel();                 $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();                $this->model->cargar("RecibosModel.php", "recibos");                $RecibosModel = new RecibosModel();        $this->model->cargar("CreditosModel.php", "creditos");                $CreditosModel = new CreditosModel();                   $datos_factura = $FacturasModel->getDatosFactura($_POST['id_factura']);                $todas_facturas = $FacturasModel->getFacturasPorCliente($datos_factura['CLIENTE_FACTURA']);                        $todos_recibos = $RecibosModel->getRecibosPorCliente($datos_factura['CLIENTE_FACTURA']);        $todos_creditos = $CreditosModel->getCreditosPorCliente($datos_factura['CLIENTE_FACTURA']);                        $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();        $terminos = $TerminosModel->getTodosTerminos();                $total_facturas = 0;                foreach ($todas_facturas as $factura) {            $total_facturas += $factura['TOTAL_FACTURA'];        }                $total_recibos = 0;                foreach ($todos_recibos as $recibo) {            $total_recibos += $recibo['VALOR_RECIBO'];        }                        $total_creditos = 0;                foreach ($todos_creditos as $credito) {            $total_creditos += $credito['VALOR_CREDITO'];        }                $productos = $FacturasModel->getProductosPorFactura($_POST['id_factura']);        $consecutivo_bd = $FacturasModel->getConsecutivo();        $tipo = $_POST['tipo'];                        ///CALCULAR SALDO DE ÉSTA FACTURA SELECCIONADA        $saldo_factura = 0;        $estado_factura = "PAGADA";        $total_pagado = $total_recibos + $total_creditos;        $total_facturas_anteriores = 0;                foreach ($todas_facturas as $factura) {                                    if($factura['CONSECUTIVO_FACTURA'] != $datos_factura['CONSECUTIVO_FACTURA']){                                $total_facturas_anteriores += $factura['TOTAL_FACTURA'];            }else{                break;            }                                    }                 //SUMA DE LAS FACTURAS ANTERIORES A ESTA, MAS EL VALOR DE ESTA FACTURA         $total_facturas_anteriores += $datos_factura['TOTAL_FACTURA']; // LO QUE DEBE HASTA ESTA FACTURA                if($total_facturas_anteriores <= $total_pagado){                        $saldo_factura = 0;            $estado_factura = "PAGADA";                    }else{                        $saldo_factura = $total_facturas_anteriores - $total_pagado;                        if($saldo_factura > $datos_factura['TOTAL_FACTURA']){                $saldo_factura = $datos_factura['TOTAL_FACTURA'];            }                        $estado_factura = "RESTANTE";                    }                $consecutivo_bd = $FacturasModel->getConsecutivo();                                       $factura = $FacturasModel->getDatosFactura($_POST['id_factura']);          $admision = $FacturasModel->getInscripcionActualPorEstudiante($datos_factura['CLIENTE_FACTURA']);                        include("vistas/facturas/factura2.php");                            $dirPdf = "archivos/pdf_factura2".$_POST['id_factura'].".pdf";                  $this->pdf->Output(''.$dirPdf.'');                    echo "urlRuta=".$dirPdf;              }    function basico($numero) {$valor = array ('uno','dos','tres','cuatro','cinco','seis','siete','ocho','nueve','diez', 'once', 'doce', 'trece', 'catorce', 'quince', 'dieciseis', 'diecisiete', 'dieciocho', 'diecinueve', 'veinte', 'veintiuno', 'veintidos', 'veintitres', 'veinticuatro','veinticinco','veintiséis','veintisiete','veintiocho','veintinueve');return $valor[$numero - 1];} function decenas($n) {$decenas = array (30=>'treinta',40=>'cuarenta',50=>'cincuenta',60=>'sesenta',70=>'setenta',80=>'ochenta',90=>'noventa');if( $n <= 29) return $this->basico($n);$x = $n % 10;if ( $x == 0 ) {return $decenas[$n];} else return $decenas[$n - $x].' y '. $this->basico($x);} function centenas($n) {$cientos = array (100 =>'cien',200 =>'doscientos',300=>'trecientos',400=>'cuatrocientos', 500=>'quinientos',600=>'seiscientos',700=>'setecientos',800=>'ochocientos', 900 =>'novecientos');if( $n >= 100) {if ( $n % 100 == 0 ) {return $cientos[$n];} else {$u = (int) substr($n,0,1);$d = (int) substr($n,1,2);return (($u == 1)?'ciento':$cientos[$u*100]).' '.$this->decenas($d);}} else return $this->decenas($n);} function miles($n) {if($n > 999) {if( $n == 1000) {return 'mil';}else {$l = strlen($n);$c = (int)substr($n,0,$l-3);$x = (int)substr($n,-3);if($c == 1) {$cadena = 'mil '.$this->centenas($x);}else if($x != 0) {$cadena = $this->centenas($c).' mil '.$this->centenas($x);}else $cadena = $this->centenas($c). ' mil';return $cadena;}} else return $this->centenas($n);} function millones($n) {if($n == 1000000) {return 'un millón';}else {$l = strlen($n);$c = (int)substr($n,0,$l-6);$x = (int)substr($n,-6);if($c == 1) {$cadena = ' millón ';} else {$cadena = ' millones ';}return $this->miles($c).$cadena.(($x > 0)?$this->miles($x):'');}}        function convertir($n) {switch (true) {case ( $n >= 1 && $n <= 29) : return $this->basico($n); break;case ( $n >= 30 && $n < 100) : return $this->decenas($n); break;case ( $n >= 100 && $n < 1000) : return $this->centenas($n); break;case ($n >= 1000 && $n <= 999999): return $this->miles($n); break;case ($n >= 1000000): return $this->millones($n);}}         public function imprimirFactura3(){                                 $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                 $this->model->cargar("UsuarioModel.php", "configuracion");        $UsuarioModel = new UsuarioModel();                 $this->model->cargar("ClientesModel.php", "configuracion");        $ClientesModel = new ClientesModel();                 $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();                $this->model->cargar("RecibosModel.php", "recibos");                $RecibosModel = new RecibosModel();        $this->model->cargar("CreditosModel.php", "creditos");                $CreditosModel = new CreditosModel();                   $datos_factura = $FacturasModel->getDatosFactura($_POST['id_factura']);                $todas_facturas = $FacturasModel->getFacturasPorCliente($datos_factura['CLIENTE_FACTURA']);                        $todos_recibos = $RecibosModel->getRecibosPorCliente($datos_factura['CLIENTE_FACTURA']);        $todos_creditos = $CreditosModel->getCreditosPorCliente($datos_factura['CLIENTE_FACTURA']);                        $this->model->cargar("TerminosModel.php", "configuracion");        $TerminosModel = new TerminosModel();        $terminos = $TerminosModel->getTodosTerminos();                $total_facturas = 0;                foreach ($todas_facturas as $factura) {            $total_facturas += $factura['TOTAL_FACTURA'];        }                $total_recibos = 0;                foreach ($todos_recibos as $recibo) {            $total_recibos += $recibo['VALOR_RECIBO'];        }                        $total_creditos = 0;                foreach ($todos_creditos as $credito) {            $total_creditos += $credito['VALOR_CREDITO'];        }                $productos = $FacturasModel->getProductosPorFactura($_POST['id_factura']);        $consecutivo_bd = $FacturasModel->getConsecutivo();        $tipo = $_POST['tipo'];                        ///CALCULAR SALDO DE ÉSTA FACTURA SELECCIONADA        $saldo_factura = 0;        $estado_factura = "PAGADA";        $total_pagado = $total_recibos;        $total_facturas_anteriores = 0;                foreach ($todas_facturas as $factura) {                                    if($factura['CONSECUTIVO_FACTURA'] != $datos_factura['CONSECUTIVO_FACTURA']){                                $total_facturas_anteriores += $factura['TOTAL_FACTURA'];            }else{                break;            }                                    }                 //SUMA DE LAS FACTURAS ANTERIORES A ESTA, MAS EL VALOR DE ESTA FACTURA         $total_facturas_anteriores += $datos_factura['TOTAL_FACTURA']; // LO QUE DEBE HASTA ESTA FACTURA                if($total_facturas_anteriores <= $total_pagado){                        $saldo_factura = 0;            $estado_factura = "PAGADA";                    }else{                        $saldo_factura = $total_facturas_anteriores - $total_pagado - $total_creditos;                        if($saldo_factura > $datos_factura['TOTAL_FACTURA']){                $saldo_factura = $datos_factura['TOTAL_FACTURA'];            }                        $estado_factura = "RESTANTE";                    }                $consecutivo_bd = $FacturasModel->getConsecutivo();                                       $factura = $FacturasModel->getDatosFactura($_POST['id_factura']);                $total_en_letras = $this->convertir($factura['TOTAL_FACTURA']);                include("vistas/facturas/factura3.php");                            $dirPdf = "archivos/pdf_factura3".$_POST['id_factura'].".pdf";                  $this->pdf->Output(''.$dirPdf.'');                    echo "urlRuta=".$dirPdf;              }        // REPORTES            public function cargarReporte1() {              $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                        $this->model->cargar("RecibosModel.php", "recibos");                $RecibosModel = new RecibosModel();        $this->model->cargar("CreditosModel.php", "creditos");                $CreditosModel = new CreditosModel();                       $facturas = $FacturasModel->getTodosFacturas();        $tipo = "FACTURAS";        include 'vistas/reportes/reporte1.php';    }          public function cargarReporte2() {                $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                include 'vistas/reportes/reporte2.php';                            }          public function cargarReporte3() {                $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                include 'vistas/reportes/reporte3.php';                            }          public function cargarReporte4() {                $this->model->cargar("FacturasModel.php", "facturas");        $FacturasModel = new FacturasModel();                include 'vistas/reportes/reporte4.php';                            }                  function EnviarCorreo($mensaje, $asunto, $archivo, $correo1='', $nombre1='', $correo2='', $nombre2='', $correo3='', $nombre3=''){                                            $mails = new Correos();            $mails->AddAddress( "sistema.viceinvestigacion@gmail.com", "VICERRECTORIA DE INVESTIGACION" );                                          if($correo1 != ""){                $mails->AddAddress( $correo1, $nombre1 );                    }            if($correo2 != ""){                $mails->AddAddress( $correo2, $nombre2 );                    }            if($correo3 != ""){                $mails->AddAddress( $correo3, $nombre3 );                    }                                    $mails->Subject = $asunto;                      $mails->Body = $mensaje;            if($archivo != ""){                $mails->AddAttachment( $archivo );                         }                                    $enviado = $mails->Send();                     if($enviado){                return  $mails->ErrorInfo;                              }else{                return $mails->ErrorInfo;                         }            }              }?>